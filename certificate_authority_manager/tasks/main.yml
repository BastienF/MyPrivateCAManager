---

- include: usage_and_prerequisite_check.yml

- name: Install required docker modules
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - docker
    - docker-py

- name: Clear out potential openssl container
  environment:
    PYTHONPATH: "/usr/local/lib/python2.7/site-packages"
  docker_container:
    name: "{{ ca_manager_container_name }}"
    state: absent

- name: Generate certificat dir tree
  file: path="{{ item }}" state=directory mode=0755
  with_items:
    - "{{ ca_manager_certificate_location }}"
    - "{{ ca_manager_certificate_location }}/certs"
    - "{{ ca_manager_certificate_location }}/newcerts"
    - "{{ ca_manager_certificate_location }}/private"
    - "{{ ca_manager_certificate_location }}/csr"

- name: Make private dir private
  file: path="{{ ca_manager_certificate_location }}/private" mode="0700"

- name: Generate Openssl conf file
  template: src="openssl.cnf.j2" dest="{{ ca_manager_certificate_location }}/openssl.cnf"
  vars:
    policy: "{{ ca_manager_validation_policy }}"
  when: ca_manager_issue_ca | bool

- name: init cert database
  file: path="{{ ca_manager_certificate_location }}/index.txt" state=touch
  when: ca_manager_issue_ca | bool

- name: init cert database serial
  shell: echo 1000 > "{{ ca_manager_certificate_location }}/serial"
  when: ca_manager_issue_ca | bool

- name: Define ciphering parameters when passphrase provided
  set_fact:
    key_cipher: "-aes256 -passout pass:'{{ ca_manager_key_pass }}'"
    key_decipher: "-passin pass:'{{ ca_manager_key_pass }}'"
  when: ca_manager_key_pass is defined

- name: Define signin CA ciphering parameters when passphrase provided
  set_fact:
    signin_ca_key_decipher: '-passin pass:"{{ ca_manager_signin_ca_key_pass }}"'
  when: ca_manager_signin_ca_key_pass is defined

- include: docker_openssl_handler.yml
  vars:
    openssl_command: >
      genrsa  -out private/{{ ca_manager_key_name }}
      {{ key_cipher|default() }} {{ ca_manager_key_length }}
    command_name: "Create the certificate key"

- name: make certificate key private
  file: path="{{ ca_manager_certificate_location }}/private/{{ ca_manager_key_name }}" mode="0400"

- include: issue_root_ca.yml
  when: ca_manager_issue_root_ca|default(false)|bool

- include: issue_intermediate_ca.yml
  when: ca_manager_issue_intermediate_ca|default(false)|bool

- include: issue_certificate.yml
  when: ca_manager_issue_certificate|default(false)|bool

- name: make cert readable
  file: path="{{ item }}" mode="0444"
  with_items:
    - "{{ ca_manager_certificate_location }}/certs/{{ ca_manager_certificate_name }}"
    - "{{ ca_manager_certificate_location }}/certs/{{ ca_manager_fullchain_certificate_name }}"
